import React, { useState, useEffect } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { Plus, Trash2, Building, AlertCircle } from "lucide-react";
import { searchService } from "../../services/searchService";
import { nhapKhoService } from "../../services/nhapKhoService";
import { formatCurrency } from "../../utils/helpers";
import { LOAI_PHIEU_NHAP, PHAM_CHAT, DON_VI_TINH } from "../../utils/constants";
import { parseAndRound, calculateTotal } from "../../utils/numberUtils";
import AutoComplete from "../common/AutoComplete";
import toast from "react-hot-toast";
import { useAuth } from "../../context/AuthContext";

const CreateNhapKhoForm = ({ onSuccess, onCancel }) => {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  // Dropdown c·∫•p 2/c·∫•p 3 cho ƒëi·ªÅu chuy·ªÉn
  const [cap2List, setCap2List] = useState([]);
  const [cap3List, setCap3List] = useState([]);
  const [selectedCap2Id, setSelectedCap2Id] = useState("");
  const [loadingCap2, setLoadingCap2] = useState(false);
  const [loadingCap3, setLoadingCap3] = useState(false);

  const {
    register,
    control,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
  } = useForm({
    defaultValues: {
      ngay_nhap: new Date().toISOString().split("T")[0],
      loai_phieu: "tu_mua",
      nguoi_nhap_hang: "",
      so_quyet_dinh: "",
      so_hoa_don: "",
      dia_chi_nhap: "",
      phuong_thuc_van_chuyen: "ƒê∆°n v·ªã t·ª± v·∫≠n chuy·ªÉn",
      ly_do_nhap: "",
      ghi_chu: "",
      nha_cung_cap_id: null,
      nha_cung_cap: null,
      phong_ban_cung_cap_id: null,
      phong_ban_cung_cap: null,
      chi_tiet: [
        {
          hang_hoa_id: null,
          hang_hoa: null,
          so_luong_ke_hoach: 1,
          so_luong: 1,
          don_gia: 0,
          don_vi_tinh: "C√°i",
          pham_chat: "tot",
          danh_diem: "",
          la_tai_san_co_dinh: false,
        },
      ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "chi_tiet",
  });

  const chiTietItems = watch("chi_tiet");
  const loaiPhieu = watch("loai_phieu");

  useEffect(() => {
    if (loaiPhieu === "dieu_chuyen") {
      // T·∫£i danh s√°ch c·∫•p 2 ƒë·ªÉ ch·ªçn
      (async () => {
        try {
          setLoadingCap2(true);
          const resCap2 = await searchService.getPhongBanCap2();
          setCap2List(resCap2.data || []);
        } catch (e) {
          console.error("Error loading cap 2:", e);
          setCap2List([]);
        } finally {
          setLoadingCap2(false);
        }
      })();
      // Reset selections
      setSelectedCap2Id("");
      setCap3List([]);
      setValue("phong_ban_cung_cap_id", null);
      setValue("phong_ban_cung_cap", null);
    } else {
      // Clear when kh√¥ng ph·∫£i ƒëi·ªÅu chuy·ªÉn
      setCap2List([]);
      setCap3List([]);
      setSelectedCap2Id("");
      setValue("phong_ban_cung_cap_id", null);
      setValue("phong_ban_cung_cap", null);
    }
  }, [loaiPhieu, setValue]);

  const handleSelectCap2 = async (cap2Id) => {
    setSelectedCap2Id(cap2Id);
    setCap3List([]);
    setValue("phong_ban_cung_cap_id", null);
    setValue("phong_ban_cung_cap", null);
    if (!cap2Id) return;
    try {
      setLoadingCap3(true);
      const resCap3 = await searchService.getPhongBanCap3ByParent(cap2Id);
      setCap3List(resCap3.data || []);
    } catch (e) {
      console.error("Error loading cap 3:", e);
      setCap3List([]);
    } finally {
      setLoadingCap3(false);
    }
  };

  const tongTien = chiTietItems.reduce((sum, item) => {
    return sum + calculateTotal(item.so_luong_ke_hoach, item.don_gia);
  }, 0);

  const handleNhaCungCapSelect = (nhaCungCap) => {
    console.log("üîç handleNhaCungCapSelect called with:", nhaCungCap);

    if (!nhaCungCap) {
      console.log("‚ùå No NCC provided, clearing values");
      setValue("nha_cung_cap", null);
      setValue("nha_cung_cap_id", null);
      return;
    }

    setValue("nha_cung_cap_id", nhaCungCap.id || null);
    setValue("nha_cung_cap", nhaCungCap);

    if (nhaCungCap.isNewItem) {
      toast(`üí° S·∫Ω t·∫°o nh√† cung c·∫•p m·ªõi: ${nhaCungCap.ten_ncc}`, {
        duration: 3000,
        style: {
          background: "#EBF8FF",
          color: "#2B6CB0",
          border: "1px solid #BEE3F8",
        },
      });
    } else {
      toast.success(`ƒê√£ ch·ªçn nh√† cung c·∫•p: ${nhaCungCap.ten_ncc}`);
    }
  };

  const handlePhongBanCungCapSelect = (phongBan) => {
    setValue("phong_ban_cung_cap_id", phongBan.id);
    setValue("phong_ban_cung_cap", phongBan);
    toast.success(`ƒê√£ ch·ªçn ƒë∆°n v·ªã cung c·∫•p: ${phongBan.ten_phong_ban}`);
  };

  const handleHangHoaSelect = (hangHoa, index) => {
    setValue(`chi_tiet.${index}.hang_hoa_id`, hangHoa.id || null);
    setValue(`chi_tiet.${index}.hang_hoa`, hangHoa);
    // ‚úÖ T·ª± ƒë·ªông ƒëi·ªÅn ƒë∆°n v·ªã t√≠nh nh∆∞ng v·∫´n c√≥ th·ªÉ thay ƒë·ªïi
    setValue(`chi_tiet.${index}.don_vi_tinh`, hangHoa.don_vi_tinh || "C√°i");

    if (hangHoa.isNewItem) {
      toast(`üí° S·∫Ω t·∫°o h√†ng h√≥a m·ªõi: ${hangHoa.ten_hang_hoa}`, {
        duration: 3000,
        style: {
          background: "#EBF8FF",
          color: "#2B6CB0",
          border: "1px solid #BEE3F8",
        },
      });
    } else {
      if (hangHoa.gia_nhap_gan_nhat && hangHoa.gia_nhap_gan_nhat > 0) {
        setValue(`chi_tiet.${index}.don_gia`, hangHoa.gia_nhap_gan_nhat);
        toast.success(
          `ƒê√£ ch·ªçn ${
            hangHoa.ten_hang_hoa
          } v√† t·ª± ƒë·ªông ƒëi·ªÅn gi√°: ${formatCurrency(hangHoa.gia_nhap_gan_nhat)}`
        );
      } else {
        toast.success(`ƒê√£ ch·ªçn ${hangHoa.ten_hang_hoa}. Vui l√≤ng nh·∫≠p gi√°.`);
      }
    }
  };

  // Auto-sync s·ªë l∆∞·ª£ng th·ª±c t·∫ø v·ªõi s·ªë l∆∞·ª£ng k·∫ø ho·∫°ch
  const handleSoLuongKeHoachChange = (value, index) => {
    setValue(`chi_tiet.${index}.so_luong_ke_hoach`, value);
    setValue(`chi_tiet.${index}.so_luong`, value); // T·ª± ƒë·ªông set s·ªë l∆∞·ª£ng th·ª±c t·∫ø = s·ªë l∆∞·ª£ng k·∫ø ho·∫°ch
  };

  // C·∫£nh b√°o/g·ª£i √Ω TSCƒê khi ƒë∆°n gi√° >= 10 tri·ªáu
  const handlePriceChange = (index, price) => {
    const newPrice = parseFloat(price) || 0;
    setValue(`chi_tiet.${index}.don_gia`, newPrice);

    if (newPrice >= 10000000) {
      const isTSCD = window.confirm(
        "ƒê∆°n gi√° >= 10.000.000. ƒê√¢y c√≥ ph·∫£i l√† t√†i s·∫£n c·ªë ƒë·ªãnh (TSCƒê) kh√¥ng?"
      );
      setValue(`chi_tiet.${index}.la_tai_san_co_dinh`, !!isTSCD);
    } else {
      setValue(`chi_tiet.${index}.la_tai_san_co_dinh`, false);
    }
  };

  const addNewRow = () => {
    append({
      hang_hoa_id: null,
      hang_hoa: null,
      so_luong_ke_hoach: 1,
      so_luong: 1,
      don_gia: 0,
      don_vi_tinh: "C√°i",
      pham_chat: "tot",
      danh_diem: "",
      la_tai_san_co_dinh: false,
    });
  };

  const createNhaCungCapIfNeeded = async (nhaCungCap) => {
    if (!nhaCungCap?.isNewItem) {
      return nhaCungCap;
    }

    try {
      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error("Timeout")), 15000)
      );
      const createPromise = searchService.createNhaCungCapAuto({
        ten_ncc: nhaCungCap.ten_ncc,
        loai_nha_cung_cap: loaiPhieu,
      });
      const response = await Promise.race([createPromise, timeoutPromise]);

      if (response.success) {
        return response.data;
      } else {
        throw new Error(response.message || "Failed to create supplier");
      }
    } catch (error) {
      let errorMessage = `Kh√¥ng th·ªÉ t·∫°o nh√† cung c·∫•p "${nhaCungCap.ten_ncc}"`;
      if (error.message === "Timeout") {
        errorMessage += ": K·∫øt n·ªëi qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i";
      }
      throw new Error(errorMessage);
    }
  };

  const createHangHoaIfNeeded = async (hangHoa, donViTinh) => {
    if (!hangHoa?.isNewItem) {
      return hangHoa;
    }

    try {
      const timeoutPromise = new Promise((_, reject) =>
        setTimeout(() => reject(new Error("Timeout")), 15000)
      );
      const createPromise = searchService.createHangHoaAuto({
        ten_hang_hoa: hangHoa.ten_hang_hoa,
        don_vi_tinh: donViTinh || "C√°i", // ‚úÖ S·ª≠ d·ª•ng ƒë∆°n v·ªã t√≠nh t·ª´ dropdown
      });
      const response = await Promise.race([createPromise, timeoutPromise]);

      if (response.success) {
        return response.data;
      } else {
        throw new Error(response.message || "Failed to create product");
      }
    } catch (error) {
      let errorMessage = `Kh√¥ng th·ªÉ t·∫°o h√†ng h√≥a "${hangHoa.ten_hang_hoa}"`;
      if (error.message === "Timeout") {
        errorMessage += ": K·∫øt n·ªëi qu√° ch·∫≠m, vui l√≤ng th·ª≠ l·∫°i";
      }
      throw new Error(errorMessage);
    }
  };

  const onSubmit = async (data) => {
    if (data.chi_tiet.length === 0) {
      toast.error("Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt h√†ng h√≥a");
      return;
    }

    if (data.loai_phieu === "dieu_chuyen" && !data.phong_ban_cung_cap) {
      toast.error("Vui l√≤ng ch·ªçn ƒë∆°n v·ªã cung c·∫•p");
      return;
    }

    if (
      (data.loai_phieu === "tu_mua" || data.loai_phieu === "tren_cap") &&
      !data.nha_cung_cap
    ) {
      toast.error("Vui l√≤ng ch·ªçn nh√† cung c·∫•p");
      return;
    }

    for (let i = 0; i < data.chi_tiet.length; i++) {
      const item = data.chi_tiet[i];
      if (!item.hang_hoa) {
        toast.error(`D√≤ng ${i + 1}: Vui l√≤ng ch·ªçn h√†ng h√≥a`);
        return;
      }
      if (!item.so_luong_ke_hoach || item.so_luong_ke_hoach <= 0) {
        toast.error(`D√≤ng ${i + 1}: S·ªë l∆∞·ª£ng k·∫ø ho·∫°ch ph·∫£i l·ªõn h∆°n 0`);
        return;
      }
      if (!item.so_luong || item.so_luong <= 0) {
        toast.error(`D√≤ng ${i + 1}: S·ªë l∆∞·ª£ng th·ª±c nh·∫≠p ph·∫£i l·ªõn h∆°n 0`);
        return;
      }
      if (item.don_gia === undefined || item.don_gia < 0) {
        toast.error(`D√≤ng ${i + 1}: ƒê∆°n gi√° kh√¥ng h·ª£p l·ªá`);
        return;
      }
    }

    setLoading(true);

    try {
      toast.loading("ƒêang x·ª≠ l√Ω phi·∫øu nh·∫≠p...", { id: "processing" });

      let finalNhaCungCap = null;
      let finalPhongBanCungCap = null;

      if (
        (data.loai_phieu === "tu_mua" || data.loai_phieu === "tren_cap") &&
        data.nha_cung_cap
      ) {
        finalNhaCungCap = await createNhaCungCapIfNeeded(data.nha_cung_cap);
        if (finalNhaCungCap && data.nha_cung_cap.isNewItem) {
          toast.success(`‚úì ƒê√£ t·∫°o nh√† cung c·∫•p: ${finalNhaCungCap.ten_ncc}`);
        }
      } else if (data.loai_phieu === "dieu_chuyen" && data.phong_ban_cung_cap) {
        finalPhongBanCungCap = data.phong_ban_cung_cap;
        toast.success(`‚úì S·∫Ω nh·∫≠p t·ª´: ${finalPhongBanCungCap.ten_phong_ban}`);
      }

      const finalChiTiet = [];
      for (let i = 0; i < data.chi_tiet.length; i++) {
        const item = data.chi_tiet[i];
        const finalHangHoa = await createHangHoaIfNeeded(
          item.hang_hoa,
          item.don_vi_tinh
        );
        if (finalHangHoa && item.hang_hoa.isNewItem) {
          toast.success(`‚úì ƒê√£ t·∫°o h√†ng h√≥a: ${finalHangHoa.ten_hang_hoa}`);
        }

        finalChiTiet.push({
          hang_hoa_id: finalHangHoa.id,
          so_luong_ke_hoach: parseFloat(item.so_luong_ke_hoach),
          so_luong: parseFloat(item.so_luong_ke_hoach), // S·ªë l∆∞·ª£ng th·ª±c t·∫ø = s·ªë l∆∞·ª£ng k·∫ø ho·∫°ch
          don_gia: parseAndRound(item.don_gia), // ‚úÖ FIX: S·ª≠ d·ª•ng utility function ƒë·ªÉ l√†m tr√≤n ch√≠nh x√°c
          don_vi_tinh: item.don_vi_tinh || "C√°i", // ‚úÖ ƒê∆°n v·ªã t√≠nh t·ª´ dropdown
          pham_chat: item.pham_chat,
          la_tai_san_co_dinh: !!item.la_tai_san_co_dinh,
          so_seri_list: item.danh_diem
            ? item.danh_diem
                .split(/[,\n]/)
                .map((s) => s.trim())
                .filter((s) => s)
            : [],
        });
      }

      const submitData = {
        ngay_nhap: data.ngay_nhap,
        loai_phieu: data.loai_phieu,
        nguoi_nhap_hang: data.nguoi_nhap_hang || "",
        so_quyet_dinh: data.so_quyet_dinh || "",
        so_hoa_don: data.so_hoa_don || "",
        dia_chi_nhap: data.dia_chi_nhap || "",
        phuong_thuc_van_chuyen:
          data.phuong_thuc_van_chuyen || "ƒê∆°n v·ªã t·ª± v·∫≠n chuy·ªÉn",
        ly_do_nhap: data.ly_do_nhap || "",
        ghi_chu: data.ghi_chu || "",
        nha_cung_cap_id: finalNhaCungCap?.id || null,
        phong_ban_cung_cap_id: finalPhongBanCungCap?.id || null,
        phong_ban_id: user?.phong_ban_id || null,
        chi_tiet: finalChiTiet,
      };

      const response = await nhapKhoService.create(submitData);
      toast.dismiss("processing");
      toast.success(
        `üéâ T·∫°o phi·∫øu nh·∫≠p th√†nh c√¥ng! M√£ phi·∫øu: ${
          response.data?.so_phieu || ""
        }`
      );

      if (data.loai_phieu === "dieu_chuyen") {
        setTimeout(() => {
          toast.info(
            `üì¶ T·ªìn kho c·ªßa ${finalPhongBanCungCap?.ten_phong_ban} s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông c·∫≠p nh·∫≠t`,
            { duration: 4000 }
          );
        }, 1000);
      }

      onSuccess?.();
    } catch (error) {
      console.error("Submit error:", error);
      toast.dismiss("processing");
      let errorMessage = "C√≥ l·ªói x·∫£y ra khi t·∫°o phi·∫øu nh·∫≠p";
      if (error.response?.data?.message) {
        errorMessage = error.response.data.message;
      } else if (error.response?.data?.errors) {
        const validationErrors = Object.values(
          error.response.data.errors
        ).flat();
        errorMessage = validationErrors.join(", ");
      } else if (error.message) {
        errorMessage = error.message;
      }
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const PhongBanCungCapField = () => {
    if (loaiPhieu !== "dieu_chuyen") return null;

    return (
      <div className="space-y-3">
        <label className="block text-sm font-medium text-gray-700">
          <Building className="inline h-4 w-4 mr-1" />
          Ch·ªçn ƒë∆°n v·ªã c·∫•p 2 v√† c·∫•p 3 ƒë·ªÉ xin ƒëi·ªÅu chuy·ªÉn
        </label>
        {/* Dropdown c·∫•p 2 */}
        <div>
          <label className="block text-xs text-gray-600 mb-1">
            ƒê∆°n v·ªã c·∫•p 2
          </label>
          {loadingCap2 ? (
            <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-sm">
              ƒêang t·∫£i danh s√°ch c·∫•p 2...
            </div>
          ) : (
            <select
              value={selectedCap2Id}
              onChange={(e) => handleSelectCap2(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">Ch·ªçn ƒë∆°n v·ªã c·∫•p 2</option>
              {cap2List.map((pb) => (
                <option key={pb.id} value={pb.id}>
                  {pb.ten_phong_ban}
                </option>
              ))}
            </select>
          )}
        </div>

        {/* Dropdown c·∫•p 3 */}
        <div>
          <label className="block text-xs text-gray-600 mb-1">
            ƒê∆°n v·ªã c·∫•p 3
          </label>
          {loadingCap3 ? (
            <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-sm">
              ƒêang t·∫£i danh s√°ch c·∫•p 3...
            </div>
          ) : cap3List.length > 0 ? (
            <select
              {...register("phong_ban_cung_cap_id", {
                required: "Vui l√≤ng ch·ªçn ƒë∆°n v·ªã c·∫•p 3",
              })}
              onChange={(e) => {
                const selectedId = parseInt(e.target.value);
                const selectedPhongBan = cap3List.find(
                  (pb) => pb.id === selectedId
                );
                if (selectedPhongBan) {
                  handlePhongBanCungCapSelect(selectedPhongBan);
                }
              }}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">Ch·ªçn ƒë∆°n v·ªã c·∫•p 3</option>
              {cap3List.map((pb) => (
                <option key={pb.id} value={pb.id}>
                  {pb.ten_phong_ban}
                </option>
              ))}
            </select>
          ) : (
            <div className="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-sm text-gray-500">
              Vui l√≤ng ch·ªçn ƒë∆°n v·ªã c·∫•p 2 tr∆∞·ªõc
            </div>
          )}
          {errors.phong_ban_cung_cap_id && (
            <p className="mt-1 text-sm text-red-600">
              {errors.phong_ban_cung_cap_id.message}
            </p>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* TH√îNG TIN CHUNG */}
        <div className="bg-white border rounded-lg p-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Th√¥ng tin phi·∫øu nh·∫≠p
          </h3>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ng√†y nh·∫≠p *
              </label>
              <input
                type="date"
                {...register("ngay_nhap", {
                  required: "Vui l√≤ng ch·ªçn ng√†y nh·∫≠p",
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 text-sm"
              />
              {errors.ngay_nhap && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.ngay_nhap.message}
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Lo·∫°i phi·∫øu *
              </label>
              <select
                {...register("loai_phieu", {
                  required: "Vui l√≤ng ch·ªçn lo·∫°i phi·∫øu",
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 text-sm"
              >
                {Object.entries(LOAI_PHIEU_NHAP).map(([key, value]) => (
                  <option key={key} value={key}>
                    {value}
                  </option>
                ))}
              </select>
              {errors.loai_phieu && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.loai_phieu.message}
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                S·ªë quy·∫øt ƒë·ªãnh
              </label>
              <input
                type="text"
                {...register("so_quyet_dinh")}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 text-sm"
                placeholder="Nh·∫≠p s·ªë quy·∫øt ƒë·ªãnh"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ghi ch√∫
              </label>
              <input
                type="text"
                {...register("ghi_chu")}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 text-sm"
                placeholder="Nh·∫≠p ghi ch√∫ (n·∫øu c√≥)"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                L√Ω do nh·∫≠p *
              </label>
              <input
                type="text"
                {...register("ly_do_nhap", {
                  required: "Vui l√≤ng nh·∫≠p l√Ω do nh·∫≠p",
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 text-sm"
                placeholder="Nh·∫≠p l√Ω do nh·∫≠p h√†ng"
              />
              {errors.ly_do_nhap && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.ly_do_nhap.message}
                </p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ng∆∞·ªùi nh·∫≠p h√†ng
              </label>
              <input
                type="text"
                {...register("nguoi_nhap_hang")}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 text-sm"
                placeholder="Nh·∫≠p t√™n ng∆∞·ªùi nh·∫≠p h√†ng"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                S·ªë h√≥a ƒë∆°n
              </label>
              <input
                type="text"
                {...register("so_hoa_don")}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 text-sm"
                placeholder="Nh·∫≠p s·ªë h√≥a ƒë∆°n"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ƒê·ªãa ch·ªâ nh·∫≠p
              </label>
              <input
                type="text"
                {...register("dia_chi_nhap")}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 text-sm"
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh·∫≠p h√†ng"
              />
            </div>
          </div>
        </div>

        {/* NH√Ä CUNG C·∫§P HO·∫∂C ƒê∆†N V·ªä CUNG C·∫§P */}
        {loaiPhieu === "dieu_chuyen" ? (
          <div className="bg-white border rounded-lg p-4">
            <PhongBanCungCapField />
          </div>
        ) : (
          <div className="bg-white border rounded-lg p-4">
            <label className="block text-lg font-medium text-gray-900 mb-3">
              <Building className="inline h-4 w-4 mr-1" />
              Nh√† cung c·∫•p *
            </label>
            <AutoComplete
              searchFunction={(query) =>
                searchService.searchNhaCungCapByType(query, loaiPhieu)
              }
              value={watch("nha_cung_cap")}
              onSelect={handleNhaCungCapSelect}
              placeholder="T√¨m ki·∫øm nh√† cung c·∫•p..."
              displayField="ten_ncc"
              searchField="ten_ncc"
              allowCreateOption={true}
              createNewLabel="T·∫°o nh√† cung c·∫•p m·ªõi"
              noResultsText="Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p"
              minSearchLength={2}
            />
            {errors.nha_cung_cap_id && (
              <p className="mt-1 text-sm text-red-600">
                {errors.nha_cung_cap_id.message}
              </p>
            )}
          </div>
        )}

        {/* CHI TI·∫æT H√ÄNG H√ìA */}
        <div className="bg-white border rounded-lg p-4">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-medium text-gray-900">
              Chi ti·∫øt h√†ng h√≥a
            </h3>
            <button
              type="button"
              onClick={addNewRow}
              className="flex items-center space-x-2 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm"
            >
              <Plus className="h-4 w-4" />
              <span>Th√™m h√†ng h√≥a</span>
            </button>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    STT
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    H√†ng h√≥a *
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    S·ªë l∆∞·ª£ng k·∫ø ho·∫°ch *
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    ƒê∆°n v·ªã t√≠nh
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                    ƒê∆°n gi√°
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    Ph·∫©m ch·∫•t
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    TSCƒê
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                    Th√†nh ti·ªÅn
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    X√≥a
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 bg-white">
                {fields.map((field, index) => {
                  const item = watch(`chi_tiet.${index}`) || {};
                  const thanhTien = calculateTotal(
                    item.so_luong_ke_hoach,
                    item.don_gia
                  );

                  return (
                    <tr key={field.id} className="hover:bg-gray-50">
                      <td className="px-4 py-3 text-center text-sm font-medium text-gray-900">
                        {index + 1}
                      </td>

                      {/* T√åM KI·∫æM H√ÄNG H√ìA */}
                      <td className="px-4 py-3">
                        <AutoComplete
                          searchFunction={async (query) => {
                            try {
                              if (!query || query.length < 2) return [];
                              const results = await searchService.searchHangHoa(
                                query,
                                loaiPhieu
                              );
                              return results.filter((item) => !item.isNewItem);
                            } catch (error) {
                              console.error("Search error:", error);
                              return [];
                            }
                          }}
                          onSelect={(hangHoa) =>
                            handleHangHoaSelect(hangHoa, index)
                          }
                          placeholder="Nh·∫≠p t√™n h√†ng h√≥a..."
                          displayField="ten_hang_hoa"
                          renderItem={(hangHoa) => (
                            <div className="p-2 hover:bg-gray-50">
                              <div className="font-medium text-gray-900">
                                {hangHoa.ten_hang_hoa}
                              </div>
                              <div className="text-xs text-gray-500 mt-1">
                                <span className="font-mono">
                                  {hangHoa.ma_hang_hoa}
                                </span>
                                {hangHoa.don_vi_tinh && (
                                  <span className="ml-2">
                                    ‚Ä¢ {hangHoa.don_vi_tinh}
                                  </span>
                                )}
                              </div>
                            </div>
                          )}
                          allowCreateOption={true}
                          createNewLabel="T·∫°o h√†ng h√≥a m·ªõi"
                          noResultsText="Kh√¥ng t√¨m th·∫•y h√†ng h√≥a"
                          minSearchLength={2}
                        />
                        {errors.chi_tiet?.[index]?.hang_hoa_id && (
                          <p className="mt-1 text-xs text-red-600">
                            {errors.chi_tiet[index].hang_hoa_id.message}
                          </p>
                        )}
                      </td>

                      {/* S·ªê L∆Ø·ª¢NG K·∫æ HO·∫†CH */}
                      <td className="px-4 py-3">
                        <input
                          type="number"
                          step="1"
                          min="0"
                          {...register(`chi_tiet.${index}.so_luong_ke_hoach`, {
                            required: "Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng k·∫ø ho·∫°ch",
                            min: {
                              value: 1,
                              message: "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0",
                            },
                          })}
                          onChange={(e) => {
                            const value = parseFloat(e.target.value) || 0;
                            handleSoLuongKeHoachChange(value, index);
                          }}
                          className="w-full px-2 py-1 border border-gray-300 rounded text-sm text-center focus:ring-2 focus:ring-green-500"
                          placeholder="0"
                        />
                        {errors.chi_tiet?.[index]?.so_luong_ke_hoach && (
                          <p className="mt-1 text-xs text-red-600">
                            {errors.chi_tiet[index].so_luong_ke_hoach.message}
                          </p>
                        )}
                      </td>

                      {/* ƒê∆†N V·ªä T√çNH */}
                      <td className="px-4 py-3">
                        <select
                          {...register(`chi_tiet.${index}.don_vi_tinh`)}
                          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-green-500"
                        >
                          {DON_VI_TINH.map((unit) => (
                            <option key={unit} value={unit}>
                              {unit}
                            </option>
                          ))}
                        </select>
                      </td>

                      {/* ƒê∆†N GI√Å */}
                      <td className="px-4 py-3">
                        <input
                          type="number"
                          step="1000"
                          min="0"
                          {...register(`chi_tiet.${index}.don_gia`)}
                          onChange={(e) =>
                            handlePriceChange(index, e.target.value)
                          }
                          className="w-full px-2 py-1 border border-gray-300 rounded text-sm text-right focus:ring-2 focus:ring-green-500"
                          placeholder="0"
                        />
                      </td>

                      {/* PH·∫®M CH·∫§T */}
                      <td className="px-4 py-3">
                        <select
                          {...register(`chi_tiet.${index}.pham_chat`)}
                          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-green-500"
                        >
                          {Object.entries(PHAM_CHAT).map(([key, value]) => (
                            <option key={key} value={key}>
                              {value.label}
                            </option>
                          ))}
                        </select>
                      </td>

                      {/* TSCƒê */}
                      <td className="px-4 py-3 text-center">
                        <input
                          type="checkbox"
                          {...register(`chi_tiet.${index}.la_tai_san_co_dinh`)}
                          className="rounded border-gray-300 text-green-600 focus:ring-green-500"
                        />
                      </td>

                      {/* TH√ÄNH TI·ªÄN */}
                      <td className="px-4 py-3 text-right text-sm font-medium text-gray-900">
                        {formatCurrency(thanhTien)}
                      </td>

                      {/* X√ìA */}
                      <td className="px-4 py-3 text-center">
                        <button
                          type="button"
                          onClick={() => remove(index)}
                          className="text-red-600 hover:text-red-800 p-1"
                        >
                          <Trash2 className="h-4 w-4" />
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>

        {/* T·ªîNG TI·ªÄN */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex justify-between items-center">
            <span className="text-lg font-medium text-gray-900">
              T·ªïng ti·ªÅn:
            </span>
            <span className="text-2xl font-bold text-green-600">
              {formatCurrency(tongTien)}
            </span>
          </div>
        </div>

        {/* N√öT H√ÄNH ƒê·ªòNG */}
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={onCancel}
            className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
          >
            H·ªßy
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {loading ? "ƒêang x·ª≠ l√Ω..." : "T·∫°o phi·∫øu nh·∫≠p"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateNhapKhoForm;
