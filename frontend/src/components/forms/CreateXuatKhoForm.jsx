// CreateXuatKhoForm.jsx - COMPLETE VERSION v·ªõi Serial Selection

import React, { useState, useEffect } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import {
  Plus,
  Trash2,
  AlertTriangle,
  Info,
  AlertCircle,
  Building,
  CheckCircle,
  Package,
  Hash,
} from "lucide-react";
import { searchService } from "../../services/searchService";
import { xuatKhoService } from "../../services/xuatKhoService";
import { formatCurrency } from "../../utils/helpers";
import { LOAI_PHIEU_XUAT, PHAM_CHAT } from "../../utils/constants";
import AutoComplete from "../common/AutoComplete";
import toast from "react-hot-toast";
import { useAuth } from "../../context/AuthContext";

const CreateXuatKhoForm = ({ onSuccess, onCancel }) => {
  const [loading, setLoading] = useState(false);
  const [tonKhoInfo, setTonKhoInfo] = useState({});

  // ‚úÖ STATE CHO SERIAL/DANH ƒêI·ªÇM SELECTION
  const [lotInfo, setLotInfo] = useState({}); // L∆∞u th√¥ng tin c√°c l√¥ h√†ng c√≥ th·ªÉ xu·∫•t
  const [selectedLots, setSelectedLots] = useState({}); // L√¥ ƒë√£ ch·ªçn cho t·ª´ng h√†ng h√≥a

  // State cho dropdown c·∫•p 2/3
  const [selectedCap2, setSelectedCap2] = useState(null);
  const [selectedCap3, setSelectedCap3] = useState(null);
  const [phongBanCap2List, setPhongBanCap2List] = useState([]);
  const [phongBanCap3List, setPhongBanCap3List] = useState([]);

  const { user } = useAuth();
  const isLevel3User = user?.phong_ban?.cap_bac === 3;

  const {
    register,
    control,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
  } = useForm({
    defaultValues: {
      ngay_xuat: new Date().toISOString().split("T")[0],
      loai_xuat: "don_vi_su_dung",
      so_quyet_dinh: "",
      nguoi_nhan: "",
      ly_do_xuat: "",
      ghi_chu: "",
      don_vi_nhan_id: null,
      don_vi_nhan: null,
      phong_ban_nhan_id: null,
      phong_ban_nhan: null,
      chi_tiet: [
        {
          hang_hoa_id: null,
          hang_hoa: null,
          so_luong: 1,
          don_gia: 0,
          pham_chat: "tot",
          chi_tiet_nhap_id: null, // ‚úÖ Kh√¥ng d√πng n·ªØa
          phieu_nhap_id: null, // ‚úÖ D√πng phieu_nhap_id thay th·∫ø
          danh_diem: null, // ‚úÖ Danh ƒëi·ªÉm ƒë∆∞·ª£c ch·ªçn (so_seri_xuat)
          so_seri_list: null, // ‚úÖ Kh√¥ng d√πng n·ªØa
        },
      ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: "chi_tiet",
  });

  const chiTietItems = watch("chi_tiet");
  const loaiXuat = watch("loai_xuat");

  const handleHangHoaSelect = async (hangHoa, index) => {
    console.log("üéØ handleHangHoaSelect called:", { hangHoa, index });

    setValue(`chi_tiet.${index}.hang_hoa_id`, hangHoa.id || null);
    setValue(`chi_tiet.${index}.hang_hoa`, hangHoa);

    // Reset c√°c field li√™n quan ƒë·∫øn l√¥/serial
    setValue(`chi_tiet.${index}.phieu_nhap_id`, null);
    setValue(`chi_tiet.${index}.danh_diem`, null);
    setValue(`chi_tiet.${index}.don_gia`, 0);

    if (hangHoa.id) {
      // C·∫≠p nh·∫≠t th√¥ng tin t·ªìn kho
      setTonKhoInfo((prev) => ({
        ...prev,
        [hangHoa.id]: hangHoa.ton_kho_hien_tai || 0,
      }));

      // ‚úÖ L·∫§Y DANH S√ÅCH C√ÅC L√î C√ì TH·ªÇ XU·∫§T
      try {
        console.log(
          "üîç Getting lots for hang hoa:",
          hangHoa.id,
          user?.phong_ban?.id
        );

        const response = await xuatKhoService.getLotsForXuatKho(
          hangHoa.id,
          user?.phong_ban?.id
        );

        console.log("üîç Lots response:", response);

        if (response.success && response.data.length > 0) {
          setLotInfo((prev) => ({
            ...prev,
            [hangHoa.id]: response.data,
          }));

          // ‚úÖ T·ª± ƒë·ªông ch·ªçn l√¥ ƒë·∫ßu ti√™n (FIFO) n·∫øu KH√îNG c√≥ serial
          const firstLot = response.data[0];
          console.log("üîç First lot:", firstLot);

          if (!hangHoa.co_so_seri && firstLot) {
            console.log("üîç Auto-selecting FIFO lot for non-serial item");
            handleLotSelect(hangHoa.id, firstLot, index);
          }
        } else {
          console.warn("‚ö†Ô∏è No lots available for:", hangHoa.ten_hang_hoa);
          toast.error(
            `H√†ng h√≥a "${hangHoa.ten_hang_hoa}" kh√¥ng c√≥ t·ªìn kho kh·∫£ d·ª•ng`
          );
        }
      } catch (error) {
        console.error("‚ùå Error getting lots:", error);
        toast.error("L·ªói khi l·∫•y th√¥ng tin l√¥ h√†ng");
      }
    }
  };

  const handleLotSelect = (hangHoaId, lot, index) => {
    console.log("üì¶ handleLotSelect called:", { hangHoaId, lot, index });

    // Set th√¥ng tin l√¥
    setValue(`chi_tiet.${index}.phieu_nhap_id`, lot.phieu_nhap_id);
    setValue(`chi_tiet.${index}.don_gia`, lot.don_gia);
    setValue(`chi_tiet.${index}.pham_chat`, lot.pham_chat);

    // X·ª≠ l√Ω danh ƒëi·ªÉm
    const hangHoa = watch(`chi_tiet.${index}.hang_hoa`);

    console.log("üì¶ handleLotSelect processing:", {
      hang_hoa: hangHoa,
      co_so_seri: hangHoa?.co_so_seri,
      lot_so_seri_list: lot.so_seri_list,
      is_array: Array.isArray(lot.so_seri_list),
      length: lot.so_seri_list?.length,
    });

    if (
      hangHoa?.co_so_seri &&
      lot.so_seri_list &&
      Array.isArray(lot.so_seri_list) &&
      lot.so_seri_list.length > 0
    ) {
      // ‚úÖ H√†ng C√ì serial V√Ä l√¥ C√ì serial data: Reset ƒë·ªÉ user ch·ªçn
      console.log("üì¶ Setting up serial selection");
      setValue(`chi_tiet.${index}.danh_diem`, "");
      setValue(`chi_tiet.${index}.so_luong`, 1);
    } else {
      // ‚úÖ H√†ng KH√îNG c√≥ serial HO·∫∂C l√¥ KH√îNG c√≥ serial data: Kh√¥ng c·∫ßn danh ƒëi·ªÉm
      console.log("üì¶ No serial needed, setting danh_diem to null");
      setValue(`chi_tiet.${index}.danh_diem`, null);
      setValue(`chi_tiet.${index}.so_luong`, Math.min(1, lot.so_luong_con_lai));
    }

    // L∆∞u th√¥ng tin l√¥ ƒë√£ ch·ªçn
    setSelectedLots((prev) => ({
      ...prev,
      [`${hangHoaId}-${index}`]: lot,
    }));

    toast.success(`ƒê√£ ch·ªçn l√¥: ${lot.so_phieu}`);
  };

  const LotSelectionField = ({ hangHoa, index }) => {
    if (!hangHoa?.id) return null;

    const lots = lotInfo[hangHoa.id] || [];
    const selectedLot = selectedLots[`${hangHoa.id}-${index}`];
    const hasSerial = hangHoa.co_so_seri;
    //const currentDanhDiem = watch(`chi_tiet.${index}.danh_diem`);

    if (lots.length === 0) {
      return (
        <div className="text-xs text-red-600 mt-1">
          ‚ö†Ô∏è Kh√¥ng c√≥ l√¥ h√†ng kh·∫£ d·ª•ng
        </div>
      );
    }

    // ‚úÖ H√†ng KH√îNG c√≥ serial - hi·ªÉn th·ªã th√¥ng tin l√¥ FIFO ƒë√£ ch·ªçn t·ª± ƒë·ªông
    if (!hasSerial && selectedLot) {
      return (
        <div className="text-xs text-green-600 mt-1 p-2 bg-green-50 border border-green-200 rounded">
          <div className="font-medium">‚úÖ L√¥ FIFO ƒë∆∞·ª£c ch·ªçn:</div>
          <div>{selectedLot.display_text}</div>
          <div>
            Gi√°: {formatCurrency(selectedLot.don_gia)} - Ch·∫•t l∆∞·ª£ng:{" "}
            {selectedLot.pham_chat}
          </div>
        </div>
      );
    }

    // ‚úÖ H√†ng C√ì serial - c·∫ßn ch·ªçn l√¥ v√† serial
    if (hasSerial) {
      return (
        <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded">
          {/* Dropdown ch·ªçn l√¥ */}
          <div className="mb-3">
            <label className="block text-xs font-medium text-blue-800 mb-1">
              üì¶ Ch·ªçn l√¥ h√†ng:
            </label>
            <select
              onChange={(e) => {
                const selectedLotId = e.target.value;
                if (selectedLotId) {
                  const lot = lots.find(
                    (l) => l.phieu_nhap_id == selectedLotId
                  );
                  if (lot) {
                    handleLotSelect(hangHoa.id, lot, index);
                  }
                } else {
                  // Reset khi kh√¥ng ch·ªçn l√¥
                  setValue(`chi_tiet.${index}.phieu_nhap_id`, null);
                  setValue(`chi_tiet.${index}.danh_diem`, null);
                  setValue(`chi_tiet.${index}.don_gia`, 0);

                  setSelectedLots((prev) => {
                    const newState = { ...prev };
                    delete newState[`${hangHoa.id}-${index}`];
                    return newState;
                  });
                }
              }}
              className="w-full px-2 py-1 border border-blue-300 rounded text-xs"
              value={selectedLot?.phieu_nhap_id || ""}
            >
              <option value="">-- Ch·ªçn l√¥ --</option>
              {lots.map((lot) => (
                <option key={lot.phieu_nhap_id} value={lot.phieu_nhap_id}>
                  {lot.display_text}
                </option>
              ))}
            </select>
          </div>

          {/* Dropdown ch·ªçn serial (ch·ªâ hi·ªÉn th·ªã khi ƒë√£ ch·ªçn l√¥) */}
          {selectedLot &&
            selectedLot.so_seri_list &&
            Array.isArray(selectedLot.so_seri_list) &&
            selectedLot.so_seri_list.length > 0 && (
              <div>
                <label className="block text-xs font-medium text-blue-800 mb-1">
                  üìù Ch·ªçn s·ªë seri:
                </label>
                <select
                  {...register(`chi_tiet.${index}.danh_diem`, {
                    required: "Vui l√≤ng ch·ªçn s·ªë seri",
                  })}
                  className="w-full px-2 py-1 border border-blue-300 rounded text-xs"
                >
                  <option value="">-- Ch·ªçn s·ªë seri --</option>
                  {selectedLot.so_seri_list.map((serial, idx) => (
                    <option key={idx} value={serial}>
                      {serial}
                    </option>
                  ))}
                </select>
                {errors.chi_tiet?.[index]?.danh_diem && (
                  <p className="text-red-500 text-xs mt-1">
                    {errors.chi_tiet[index].danh_diem.message}
                  </p>
                )}
              </div>
            )}

          {/* Hi·ªÉn th·ªã th√¥ng b√°o n·∫øu l√¥ kh√¥ng c√≥ serial */}
          {selectedLot &&
            (!selectedLot.so_seri_list ||
              !Array.isArray(selectedLot.so_seri_list) ||
              selectedLot.so_seri_list.length === 0) && (
              <div className="text-xs text-orange-600 mt-2 p-2 bg-orange-50 rounded">
                ‚ö†Ô∏è L√¥ n√†y kh√¥ng c√≥ s·ªë seri trong h·ªá th·ªëng
              </div>
            )}

          {/* Th√¥ng tin l√¥ ƒë√£ ch·ªçn */}
          {selectedLot && (
            <div className="text-xs text-gray-600 mt-2 p-2 bg-gray-50 rounded">
              <div>
                <strong>L√¥:</strong> {selectedLot.so_phieu}
              </div>
              <div>
                <strong>Gi√°:</strong> {formatCurrency(selectedLot.don_gia)}
              </div>
              <div>
                <strong>Ch·∫•t l∆∞·ª£ng:</strong> {selectedLot.pham_chat}
              </div>
              <div>
                <strong>C√≤n l·∫°i:</strong> {selectedLot.so_luong_con_lai}
              </div>
            </div>
          )}
        </div>
      );
    }

    return null;
  };

  // ‚úÖ LOAD DANH S√ÅCH C·∫§P 2 KHI CH·ªåN LO·∫†I "XU·∫§T ƒê∆†N V·ªä"
  useEffect(() => {
    const loadPhongBanCap2 = async () => {
      if (loaiXuat !== "don_vi_nhan") {
        setPhongBanCap2List([]);
        setPhongBanCap3List([]);
        setSelectedCap2(null);
        setSelectedCap3(null);
        return;
      }

      try {
        const response = await xuatKhoService.getPhongBanCap2List();
        if (response.success) {
          setPhongBanCap2List(response.data);
        }
      } catch (error) {
        console.error("‚ùå Error loading phong ban cap 2:", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng ban c·∫•p 2");
        setPhongBanCap2List([]);
      }
    };

    loadPhongBanCap2();
  }, [loaiXuat]);

  // ‚úÖ LOAD DANH S√ÅCH C·∫§P 3 KHI CH·ªåN C·∫§P 2
  useEffect(() => {
    const loadPhongBanCap3 = async () => {
      if (!selectedCap2 || loaiXuat !== "don_vi_nhan") {
        setPhongBanCap3List([]);
        return;
      }

      try {
        const response = await xuatKhoService.getPhongBanCap3ByParent(
          selectedCap2
        );
        if (response.success) {
          setPhongBanCap3List(response.data);
        }
      } catch (error) {
        console.error("‚ùå Error loading phong ban cap 3:", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch kho c·∫•p 3");
        setPhongBanCap3List([]);
      }
    };

    loadPhongBanCap3();
  }, [selectedCap2, loaiXuat]);

  // Helper functions cho dropdown c·∫•p 2/3
  const handleCap2Select = (cap2Id) => {
    setSelectedCap2(cap2Id);
    setSelectedCap3(null);
    setPhongBanCap3List([]);
    setValue("phong_ban_nhan", null);
    setValue("phong_ban_nhan_id", null);
  };

  const handleCap3Select = (cap3Id) => {
    setSelectedCap3(cap3Id);
    const selectedPhongBan = phongBanCap3List.find(
      (pb) => pb.id === parseInt(cap3Id)
    );
    if (selectedPhongBan) {
      setValue("phong_ban_nhan", selectedPhongBan);
      setValue("phong_ban_nhan_id", selectedPhongBan.id);
      toast.success(`ƒê√£ ch·ªçn ƒë∆°n v·ªã nh·∫≠n: ${selectedPhongBan.ten_phong_ban}`);
    }
  };

  const onSubmit = async (data) => {
    setLoading(true);

    try {
      console.log("üîç Starting validation with data:", data);

      // ‚úÖ Validation chi ti·∫øt - LOGIC M·ªöI
      let isValid = true;

      for (let i = 0; i < data.chi_tiet.length; i++) {
        const item = data.chi_tiet[i];

        console.log(`üîç Validating item ${i + 1}:`, {
          hang_hoa_id: item.hang_hoa_id,
          hang_hoa: item.hang_hoa,
          phieu_nhap_id: item.phieu_nhap_id,
          danh_diem: item.danh_diem,
          so_luong: item.so_luong,
        });

        // 1. Ki·ªÉm tra ƒë√£ ch·ªçn h√†ng h√≥a ch∆∞a
        if (!item.hang_hoa_id || !item.hang_hoa) {
          toast.error(`D√≤ng ${i + 1}: Vui l√≤ng ch·ªçn m·ªôt h√†ng h√≥a h·ª£p l·ªá.`);
          console.log(`‚ùå Item ${i + 1}: Missing hang hoa`);
          isValid = false;
          break;
        }

        const hangHoaInfo = item.hang_hoa;
        const selectedLot = selectedLots[`${hangHoaInfo.id}-${i}`];

        console.log(`üîç Item ${i + 1} hang hoa info:`, {
          ten_hang_hoa: hangHoaInfo.ten_hang_hoa,
          co_so_seri: hangHoaInfo.co_so_seri,
          selectedLot: selectedLot
            ? {
                phieu_nhap_id: selectedLot.phieu_nhap_id,
                so_seri_list: selectedLot.so_seri_list,
                has_serial:
                  selectedLot.so_seri_list &&
                  Array.isArray(selectedLot.so_seri_list) &&
                  selectedLot.so_seri_list.length > 0,
              }
            : null,
        });

        // 2. Ki·ªÉm tra ƒë√£ ch·ªçn l√¥ ch∆∞a
        if (!item.phieu_nhap_id) {
          toast.error(
            `D√≤ng ${i + 1}: Ch∆∞a ch·ªçn l√¥ h√†ng cho "${hangHoaInfo.ten_hang_hoa}"`
          );
          console.log(`‚ùå Item ${i + 1}: Missing phieu_nhap_id`);
          isValid = false;
          break;
        }

        // 3. ‚úÖ LOGIC M·ªöI: Ki·ªÉm tra serial CH·ªà KHI h√†ng h√≥a C√ì serial V√Ä l√¥ C√ì serial data
        const needsSerial =
          hangHoaInfo.co_so_seri &&
          selectedLot &&
          selectedLot.so_seri_list &&
          Array.isArray(selectedLot.so_seri_list) &&
          selectedLot.so_seri_list.length > 0;

        console.log(`üîç Item ${i + 1} serial check:`, {
          hang_hoa_co_so_seri: hangHoaInfo.co_so_seri,
          lot_has_serials:
            selectedLot &&
            selectedLot.so_seri_list &&
            Array.isArray(selectedLot.so_seri_list) &&
            selectedLot.so_seri_list.length > 0,
          needs_serial: needsSerial,
          current_danh_diem: item.danh_diem,
        });

        if (needsSerial && !item.danh_diem) {
          toast.error(
            `D√≤ng ${i + 1}: H√†ng h√≥a "${
              hangHoaInfo.ten_hang_hoa
            }" c·∫ßn ch·ªçn s·ªë seri t·ª´ l√¥`
          );
          console.log(`‚ùå Item ${i + 1}: Needs serial but not selected`);
          isValid = false;
          break;
        }

        // 4. Ki·ªÉm tra s·ªë l∆∞·ª£ng
        if (!item.so_luong || parseFloat(item.so_luong) <= 0) {
          toast.error(`D√≤ng ${i + 1}: S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0`);
          console.log(`‚ùå Item ${i + 1}: Invalid quantity`);
          isValid = false;
          break;
        }

        console.log(`‚úÖ Item ${i + 1}: Validation passed`);
      }

      if (!isValid) {
        console.log("‚ùå Validation failed, stopping submission");
        setLoading(false);
        return;
      }

      console.log("‚úÖ All validation passed, submitting data");
      console.log("üìã Final submission data:", data);

      const response = await xuatKhoService.create(data);

      if (response.success) {
        toast.success("T·∫°o phi·∫øu xu·∫•t th√†nh c√¥ng!");
        if (onSuccess) onSuccess(response.data);
      } else {
        toast.error(response.message || "C√≥ l·ªói x·∫£y ra");
      }
    } catch (error) {
      console.error("Error creating phieu xuat:", error);
      toast.error("L·ªói khi t·∫°o phi·∫øu xu·∫•t: " + error.message);
    } finally {
      setLoading(false);
    }
  };

  // ‚úÖ COMPONENT CH·ªåN ƒê∆†N V·ªä NH·∫¨N
  const DonViNhanField = () => {
    if (loaiXuat !== "don_vi_nhan") return null;

    return (
      <div className="bg-white border rounded-lg p-4">
        <label className="block text-lg font-medium text-gray-900 mb-3">
          <Building className="inline h-4 w-4 mr-1" />
          ƒê∆°n v·ªã nh·∫≠n *
        </label>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-xs text-gray-500 mb-1">
              1. Ch·ªçn c·∫•p 2
            </label>
            <select
              value={selectedCap2 || ""}
              onChange={(e) => handleCap2Select(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 text-sm"
            >
              <option value="">-- Ch·ªçn c·∫•p 2 --</option>
              {phongBanCap2List.map((pb) => (
                <option key={pb.id} value={pb.id}>
                  {pb.ten_phong_ban}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label className="block text-xs text-gray-500 mb-1">
              2. Ch·ªçn c·∫•p 3 (kho)
            </label>
            <select
              value={selectedCap3 || ""}
              onChange={(e) => handleCap3Select(e.target.value)}
              disabled={!selectedCap2 || phongBanCap3List.length === 0}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 text-sm disabled:bg-gray-100"
            >
              <option value="">-- Ch·ªçn c·∫•p 3 --</option>
              {phongBanCap3List.map((pb) => (
                <option key={pb.id} value={pb.id}>
                  {pb.ten_phong_ban}
                </option>
              ))}
            </select>
          </div>
        </div>

        {watch("phong_ban_nhan") && (
          <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded">
            <div className="flex items-center space-x-2">
              <CheckCircle className="h-4 w-4 text-green-600" />
              <span className="text-sm text-green-800">
                ƒê√£ ch·ªçn: {watch("phong_ban_nhan").ten_phong_ban}
              </span>
            </div>
          </div>
        )}
      </div>
    );
  };

  if (!isLevel3User) {
    return (
      <div className="p-6 text-center">
        <AlertCircle className="mx-auto h-12 w-12 text-red-500 mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
        </h3>
        <p className="text-gray-600">
          Ch·ªâ c√≥ c·∫•p 3 m·ªõi ƒë∆∞·ª£c t·∫°o phi·∫øu xu·∫•t kho.
        </p>
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto p-6">
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* TH√îNG TIN CHUNG */}
        <div className="bg-white border rounded-lg p-4">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            Th√¥ng tin phi·∫øu xu·∫•t
          </h3>

          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ng√†y xu·∫•t *
              </label>
              <input
                type="date"
                {...register("ngay_xuat", {
                  required: "Vui l√≤ng ch·ªçn ng√†y xu·∫•t",
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Lo·∫°i xu·∫•t *
              </label>
              <select
                {...register("loai_xuat", {
                  required: "Vui l√≤ng ch·ªçn lo·∫°i xu·∫•t",
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
              >
                {Object.entries(LOAI_PHIEU_XUAT).map(([key, value]) => (
                  <option key={key} value={key}>
                    {value.label}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                S·ªë quy·∫øt ƒë·ªãnh
              </label>
              <input
                type="text"
                {...register("so_quyet_dinh")}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
                placeholder="Nh·∫≠p s·ªë quy·∫øt ƒë·ªãnh"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ghi ch√∫
              </label>
              <input
                type="text"
                {...register("ghi_chu")}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
                placeholder="Nh·∫≠p ghi ch√∫ (n·∫øu c√≥)"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                L√Ω do xu·∫•t *
              </label>
              <input
                type="text"
                {...register("ly_do_xuat", {
                  required: "Vui l√≤ng nh·∫≠p l√Ω do xu·∫•t",
                })}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
                placeholder="Nh·∫≠p l√Ω do xu·∫•t h√†ng"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Ng∆∞·ªùi nh·∫≠n
              </label>
              <input
                type="text"
                {...register("nguoi_nhan")}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 text-sm"
                placeholder="Nh·∫≠p t√™n ng∆∞·ªùi nh·∫≠n"
              />
            </div>
          </div>
        </div>

        {/* ƒê∆†N V·ªä NH·∫¨N (ch·ªâ hi·ªán khi lo·∫°i xu·∫•t = don_vi_nhan) */}
        <DonViNhanField />

        {/* CHI TI·∫æT H√ÄNG H√ìA */}
        <div className="bg-white border rounded-lg p-4">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-medium text-gray-900">
              Chi ti·∫øt h√†ng h√≥a
            </h3>
            <button
              type="button"
              onClick={() =>
                append({
                  hang_hoa_id: null,
                  hang_hoa: null,
                  so_luong: 1,
                  don_gia: 0,
                  pham_chat: "tot",
                  chi_tiet_nhap_id: null,
                  danh_diem: null,
                  so_seri_list: null,
                })
              }
              className="flex items-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm"
            >
              <Plus className="h-4 w-4" />
              <span>Th√™m h√†ng h√≥a</span>
            </button>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    STT
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    H√†ng h√≥a *
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    T·ªìn kho
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    S·ªë l∆∞·ª£ng *
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                    ƒê∆°n gi√°
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    Ph·∫©m ch·∫•t
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                    Th√†nh ti·ªÅn
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                    X√≥a
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200 bg-white">
                {fields.map((field, index) => {
                  const item = chiTietItems[index] || {};
                  const thanhTien =
                    (parseFloat(item.so_luong) || 0) *
                    (parseFloat(item.don_gia) || 0);
                  const tonKho = tonKhoInfo[item.hang_hoa_id] || 0;
                  const hasSelectedHangHoa = item.hang_hoa && item.hang_hoa.id;
                  const selectedLot =
                    selectedLots[`${item.hang_hoa_id}-${index}`];

                  return (
                    <tr key={field.id} className="hover:bg-gray-50">
                      <td className="px-4 py-3 text-center text-sm font-medium text-gray-900">
                        {index + 1}
                      </td>

                      {/* ‚úÖ T√åM KI·∫æM H√ÄNG H√ìA v·ªõi API m·ªõi */}
                      <td className="px-4 py-3">
                        <AutoComplete
                          searchFunction={async (query) => {
                            try {
                              if (!query || query.length < 2) return [];
                              const results =
                                await searchService.searchHangHoaForXuatKho(
                                  query,
                                  user?.phong_ban?.id
                                );
                              return results.filter((item) => !item.isNewItem);
                            } catch (error) {
                              console.error("Search error:", error);
                              return [];
                            }
                          }}
                          onSelect={(hangHoa) =>
                            handleHangHoaSelect(hangHoa, index)
                          }
                          placeholder="Nh·∫≠p t√™n h√†ng h√≥a..."
                          displayField="ten_hang_hoa"
                          renderItem={(hangHoa) => (
                            <div className="p-2 hover:bg-gray-50">
                              <div className="font-medium text-gray-900">
                                {hangHoa.ten_hang_hoa}
                              </div>
                              <div className="text-xs text-gray-500 mt-1">
                                <span className="font-mono">
                                  {hangHoa.ma_hang_hoa}
                                </span>
                                <span className="mx-2">‚Ä¢</span>
                                <span className="text-green-600 font-medium">
                                  T·ªìn: {hangHoa.ton_kho_hien_tai}{" "}
                                  {hangHoa.don_vi_tinh}
                                </span>
                                {hangHoa.co_so_seri && (
                                  <span className="ml-2 text-blue-600 font-medium">
                                    üè∑Ô∏è C√≥ Serial
                                  </span>
                                )}
                                {hangHoa.warning && (
                                  <span className="ml-2 text-orange-600 font-medium">
                                    ‚ö†Ô∏è {hangHoa.warning}
                                  </span>
                                )}
                              </div>
                            </div>
                          )}
                          className="min-w-[200px]"
                          key={`hangHoa-${index}`}
                        />

                        {hasSelectedHangHoa && (
                          <div className="text-xs text-green-600 mt-1">
                            ‚úÖ {item.hang_hoa.ma_hang_hoa} -{" "}
                            {item.hang_hoa.don_vi_tinh}
                            {item.hang_hoa.co_so_seri && (
                              <span className="text-blue-600 ml-2">
                                üè∑Ô∏è C√≥ danh ƒëi·ªÉm
                              </span>
                            )}
                          </div>
                        )}

                        {/* ‚úÖ COMPONENT CH·ªåN L√î/SERIAL */}
                        <LotSelectionField
                          hangHoa={item.hang_hoa}
                          index={index}
                        />
                      </td>

                      {/* T·ªíN KHO */}
                      <td className="px-4 py-3 text-center">
                        {hasSelectedHangHoa ? (
                          <div>
                            <span
                              className={`font-medium text-sm ${
                                tonKho > 0 ? "text-green-600" : "text-red-600"
                              }`}
                            >
                              {tonKho > 0
                                ? tonKho.toLocaleString()
                                : "H·∫øt h√†ng"}
                            </span>
                            {selectedLot && (
                              <div className="text-xs text-blue-600 mt-1">
                                L√¥: {selectedLot.so_luong_con_lai}
                              </div>
                            )}
                          </div>
                        ) : (
                          <span className="text-gray-400 text-sm">-</span>
                        )}
                      </td>

                      {/* S·ªê L∆Ø·ª¢NG */}
                      <td className="px-4 py-3">
                        <input
                          type="number"
                          {...register(`chi_tiet.${index}.so_luong`, {
                            required: true,
                            min: 1,
                            max:
                              selectedLot?.so_luong_con_lai || tonKho || 999999,
                          })}
                          className="w-20 px-2 py-1 border border-gray-300 rounded text-center text-sm focus:ring-2 focus:ring-blue-500"
                          step="1"
                          min="1"
                          max={
                            selectedLot?.so_luong_con_lai || tonKho || 999999
                          }
                        />
                        {hasSelectedHangHoa &&
                          selectedLot &&
                          parseFloat(item.so_luong) >
                            selectedLot.so_luong_con_lai && (
                            <div className="text-xs text-red-600 mt-1">
                              V∆∞·ª£t qu√° s·ªë l∆∞·ª£ng l√¥!
                            </div>
                          )}
                        {hasSelectedHangHoa &&
                          !selectedLot &&
                          parseFloat(item.so_luong) > tonKho && (
                            <div className="text-xs text-red-600 mt-1">
                              V∆∞·ª£t qu√° t·ªìn kho!
                            </div>
                          )}
                      </td>

                      {/* ƒê∆†N GI√Å */}
                      <td className="px-4 py-3">
                        <input
                          type="number"
                          {...register(`chi_tiet.${index}.don_gia`, {
                            required: true,
                            min: 0,
                          })}
                          className="w-24 px-2 py-1 border border-gray-300 rounded text-right text-sm focus:ring-2 focus:ring-blue-500"
                          step="1000"
                          min="0"
                          readOnly={!!selectedLot} // ‚úÖ Ch·ªâ ƒë·ªçc n·∫øu ƒë√£ ch·ªçn l√¥ (gi√° theo l√¥)
                        />
                        {selectedLot && (
                          <div className="text-xs text-blue-600 mt-1">
                            üí∞ Gi√° theo l√¥ nh·∫≠p
                          </div>
                        )}
                      </td>

                      {/* PH·∫®M CH·∫§T */}
                      <td className="px-4 py-3">
                        <select
                          {...register(`chi_tiet.${index}.pham_chat`)}
                          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:ring-2 focus:ring-blue-500"
                          disabled={!!selectedLot} // ‚úÖ Ch·ªâ ƒë·ªçc n·∫øu ƒë√£ ch·ªçn l√¥
                        >
                          {Object.entries(PHAM_CHAT).map(([key, value]) => (
                            <option key={key} value={key}>
                              {value.label}
                            </option>
                          ))}
                        </select>
                        {selectedLot && (
                          <div className="text-xs text-blue-600 mt-1">
                            üìã Theo l√¥ nh·∫≠p
                          </div>
                        )}
                      </td>

                      {/* TH√ÄNH TI·ªÄN */}
                      <td className="px-4 py-3 text-right">
                        <span className="text-sm font-medium text-gray-900">
                          {formatCurrency(thanhTien)}
                        </span>
                      </td>

                      {/* X√ìA */}
                      <td className="px-4 py-3 text-center">
                        {fields.length > 1 && (
                          <button
                            type="button"
                            onClick={() => {
                              // ‚úÖ X√≥a th√¥ng tin l√¥ khi x√≥a d√≤ng
                              const hangHoaId = item.hang_hoa_id;
                              if (hangHoaId) {
                                setSelectedLots((prev) => {
                                  const newState = { ...prev };
                                  delete newState[`${hangHoaId}-${index}`];
                                  return newState;
                                });
                                setLotInfo((prev) => {
                                  const newState = { ...prev };
                                  delete newState[hangHoaId];
                                  return newState;
                                });
                                setTonKhoInfo((prev) => {
                                  const newState = { ...prev };
                                  delete newState[hangHoaId];
                                  return newState;
                                });
                              }
                              remove(index);
                            }}
                            className="p-1 text-red-600 hover:text-red-800 hover:bg-red-50 rounded"
                          >
                            <Trash2 className="h-4 w-4" />
                          </button>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>

          {/* T·ªîNG TI·ªÄN */}
          <div className="mt-4 p-3 bg-gray-50 border border-gray-200 rounded">
            <div className="flex justify-between items-center text-lg font-semibold">
              <span>T·ªïng ti·ªÅn:</span>
              <span className="text-blue-600">
                {formatCurrency(
                  chiTietItems.reduce((total, item) => {
                    return (
                      total +
                      (parseFloat(item.so_luong) || 0) *
                        (parseFloat(item.don_gia) || 0)
                    );
                  }, 0)
                )}
              </span>
            </div>
          </div>
        </div>

        {/* BUTTONS */}
        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={onCancel}
            className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50"
          >
            H·ªßy
          </button>
          <button
            type="submit"
            disabled={loading}
            className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? "ƒêang t·∫°o..." : "T·∫°o phi·∫øu xu·∫•t"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateXuatKhoForm;
